const loadParserConfig = require('./load/parser-config');
const loadCommitTypes = require('./load/commit-types');
const parse = require('./parse');
const analyzeCommit = require('./analyze-commit');
const compareReleaseTypes = require('./compare-release-types');
const RELEASE_TYPES = require('./default/release-types');
const DEFAULT_COMMIT_TYPES = require('./default/commit-types');

/**
 * @callback commitAnalyzerCallback
 * @param {Error} error error object.
 * @param {string} changelog changelog generated by the plugin.
 */

/**
  * Determine the type of release to create based on a list of commits.
  * 
  * @param {Object} pluginConfig semantic-release configuration
  * @param {string} pluginConfig.preset conventional-changelog preset ('angular', 'atom', 'codemirror', 'ember', 'eslint', 'express', 'jquery', 'jscs', 'jshint')
  * @param {string} pluginConfig.config requierable npm package with a custom conventional-changelog preset
  * @param {string|Array} pluginConfig.commitTypes a string to load an external module or an `Array` of rules.
  * @param {Object} pluginConfig.parserOpts additional `conventional-changelog-parser` options that will overwrite ones loaded by `preset` or `config`.
  * @param {Object} options semantic-release options
  * @param {Array} options.commits array of commits
  * @param {commitAnalyzerCallback} callback The callback called with the release type.
  */
module.exports = async (pluginConfig, {commits}, callback) => {
  try {
    const commitTypes = loadCommitTypes(pluginConfig);
    const config = await loadParserConfig(pluginConfig);
    let releaseType = null;

    commits.every(rawCommit => {
      const commit = parse(rawCommit.message, config);
      let commitReleaseType;

      // Determine release type based on custom commitTypes
      if (commitTypes) {
        commitReleaseType = analyzeCommit(commitTypes, commit);
      }
      // If no custom commitTypes or none matched the commit, try with default commitTypes
      if (!commitReleaseType) {
        commitReleaseType = analyzeCommit(DEFAULT_COMMIT_TYPES, commit);
      }
      // Set releaseType if commit's release type is higher
      if (commitReleaseType && compareReleaseTypes(releaseType, commitReleaseType)) {
        releaseType = commitReleaseType;
      }

      // Break loop if releaseType is the highest
      if (releaseType === RELEASE_TYPES[0]) {
        return false;
      }
      return true;
    });
    callback(null, releaseType);
  } catch (err) {
    callback(err);
  }
};
